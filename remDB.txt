CREATE TYPE return_type AS 
("Id" integer,"Content" TEXT, "ReplyTo" integer, "ThreadId" integer,
"UserId" text, "GroupId" integer, "NrReplies" integer, "UserName" varchar);

------- "UserId" text

CREATE OR REPLACE FUNCTION getComments(ThreadId integer, lastCommentId integer DEFAULT NULL) 
RETURNS SETOF return_type  AS $getComments$
DECLARE
	commentR record;
	replyR record;
	repliesLimit integer = 3;
	commentsLimit integer = 4;
	    	
	replyCursor CURSOR(commentR_ID integer,repliesLimit integer) FOR SELECT "Comments"."Id","Content","ReplyTo","ThreadId","UserId","GroupId", 0 as "NrReplies", "AspNetUsers"."UserName"  
FROM "Comments" 
	INNER JOIN "AspNetUsers" ON "UserId" = "AspNetUsers"."Id" WHERE "GroupId" = commentR_ID 
ORDER BY "Id" ASC LIMIT repliesLimit;


-------
commentQuery TEXT;

BEGIN

commentQuery := 'SELECT "Comments"."Id" as "comment_id","Content","ReplyTo","ThreadId","UserId","GroupId",0 as "NrReplies", "AspNetUsers"."UserName" 
   FROM "Comments" 
	INNER JOIN "AspNetUsers" ON "UserId" = "AspNetUsers"."Id" WHERE "ThreadId" = $1 AND "ReplyTo" is null';

IF lastCommentId IS NOT NULL THEN
commentQuery := commentQuery || ' AND "Comments"."Id" <' || lastCommentId;
END IF;


commentQuery := commentQuery || ' ORDER BY "Comments"."Id" DESC LIMIT $2';


----------main
   FOR commentR IN EXECUTE commentQuery USING ThreadId, commentsLimit
   LOOP
	commentR."NrReplies" := (SELECT COUNT("Comments"."Id") FROM "Comments" WHERE  "GroupId" = commentR.comment_id);
	return next commentR;
		
	FOR replyR IN replyCursor(commentR.comment_id, repliesLimit)
	LOOP
		return NEXT replyR;
	END LOOP;
	
	
   END LOOP;


  
   return;

END;
$getComments$ LANGUAGE plpgsql;

SELECT * from getComments(1)